#include "defs.hpp"

namespace ahn
{
	std::string get_error_name(unsigned int error_code)
	{
		switch (error_code)
		{
		case ERROR_ANTICPXSVR_FILE_ACCESS_DENIED:
			return std::string("ERROR_ANTICPXSVR_FILE_ACCESS_DENIED");

		case ERROR_ANTICPXSVR_FILE_NOT_FOUND:
			return std::string("ERROR_ANTICPXSVR_FILE_NOT_FOUND");

		case ERROR_ANTICPXSVR_INVALID_PARAMETER:
			return std::string("ERROR_ANTICPXSVR_INVALID_PARAMETER");

		case ERROR_ANTICPXSVR_BAD_FORMAT:
			return std::string("ERROR_ANTICPXSVR_BAD_FORMAT");

		case ERROR_ANTICPXSVR_NOT_YET_RECEIVED_RESPONSE:
			return std::string("ERROR_ANTICPXSVR_NOT_YET_RECEIVED_RESPONSE");

		case ERROR_ANTICPXSVR_NO_WAITING:
			return std::string("ERROR_ANTICPXSVR_NO_WAITING");

		case ERROR_ANTICPXSVR_NOT_ENOUGH_MEMORY:
			return std::string("ERROR_ANTICPXSVR_NOT_ENOUGH_MEMORY");

		case ERROR_ANTICPXSVR_BAD_MESSAGE:
			return std::string("ERROR_ANTICPXSVR_BAD_MESSAGE");

		case ERROR_ANTICPXSVR_REPLY_ATTACK:
			return std::string("ERROR_ANTICPXSVR_REPLY_ATTACK");

		case ERROR_ANTICPXSVR_HSHIELD_FILE_ATTACK:
			return std::string("ERROR_ANTICPXSVR_HSHIELD_FILE_ATTACK");

		case ERROR_ANTICPXSVR_CLIENT_FILE_ATTACK:
			return std::string("ERROR_ANTICPXSVR_CLIENT_FILE_ATTACK");

		case ERROR_ANTICPXSVR_MEMORY_ATTACK:
			return std::string("ERROR_ANTICPXSVR_MEMORY_ATTACK");

		case ERROR_ANTICPXSVR_OLD_VERSION_CLIENT_EXPIRED:
			return std::string("ERROR_ANTICPXSVR_OLD_VERSION_CLIENT_EXPIRED");

		case ERROR_ANTICPXSVR_UNKNOWN_CLIENT:
			return std::string("ERROR_ANTICPXSVR_UNKNOWN_CLIENT");

		case ERROR_ANTICPXSVR_V3SENGINE_FILE_ATTACK:
			return std::string("ERROR_ANTICPXSVR_V3SENGINE_FILE_ATTACK");

		case ERROR_ANTICPXSVR_NANOENGINE_FILE_ATTACK:
			return std::string("ERROR_ANTICPXSVR_NANOENGINE_FILE_ATTACK");

		case ERROR_ANTICPXSVR_INVALID_HACKSHIELD_VERSION:
			return std::string("ERROR_ANTICPXSVR_INVALID_HACKSHIELD_VERSION");

		case ERROR_ANTICPXSVR_INVALID_ENGINE_VERSION:
			return std::string("ERROR_ANTICPXSVR_INVALID_ENGINE_VERSION");

		case ERROR_ANTICPXSVR_CREATE_SVROBJ_EXCEPTION:
			return std::string("ERROR_ANTICPXSVR_CREATE_SVROBJ_EXCEPTION");

		case ERROR_ANTICPXSVR_MAKEREQ_EXCEPTION:
			return std::string("ERROR_ANTICPXSVR_MAKEREQ_EXCEPTION");

		case ERROR_ANTICPXSVR_VERIFY_EXCEPTION:
			return std::string("ERROR_ANTICPXSVR_VERIFY_EXCEPTION");

		case ERROR_ANTICPXSVR_TRACE_EXCEPTION:
			return std::string("ERROR_ANTICPXSVR_TRACE_EXCEPTION");

		case ERROR_ANTICPXSVR_CREATE_CLIENT_OBJECT_EXCEPTION:
			return std::string("ERROR_ANTICPXSVR_CREATE_CLIENT_OBJECT_EXCEPTION");

		case ERROR_ANTICPXSVR_ABNORMAL_HACKSHIELD_STATUS:
			return std::string("ERROR_ANTICPXSVR_ABNORMAL_HACKSHIELD_STATUS");

		case ERROR_ANTICPXSVR_DETECT_CALLBACK_IS_NOTIFIED:
			return std::string("ERROR_ANTICPXSVR_DETECT_CALLBACK_IS_NOTIFIED");

		case ERROR_ANTICPXSVR_VERIFYEX_EXCEPTION:
			return std::string("ERROR_ANTICPXSVR_VERIFYEX_EXCEPTION");

		case ERROR_ANTICPXSVR_ABNORMAL_HACKSHIELD_XSTATUS:
			return std::string("ERROR_ANTICPXSVR_ABNORMAL_HACKSHIELD_XSTATUS");

		case ERROR_ANTICPXSVR_OLD_HACKSHIELD_VERSION:
			return std::string("ERROR_ANTICPXSVR_OLD_HACKSHIELD_VERSION");

		case ERROR_ANTICPXSVR_UNKNOWN:
			return std::string("ERROR_ANTICPXSVR_UNKNOWN");

		default:
			break;
		}

		return std::string("Error is unknown!");
	}
}