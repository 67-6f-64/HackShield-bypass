#include "md5.hpp"
#include "relink.hpp"

namespace ahn
{
	namespace crypto
	{
		namespace md5
		{
			/* raw binary data for function-constructions */
			static unsigned char initialize_context_raw[] =
			{
				0x8B, 0x44, 0x24, 0x04, 0xC7, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x40, 0x08, 0x01, 0x23, 0x45, 0x67, 0xC7, 0x40, 0x0C, 0x89, 0xAB, 0xCD, 0xEF, 0xC7, 0x40, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0xC7, 0x40, 0x14, 0x76, 0x54, 0x32, 0x10, 0xC3
			};

			static unsigned char update_raw[] =
			{
				0x8B, 0x44, 0x24, 0x04, 0x53, 0x55, 0x8B, 0x6C, 0x24, 0x14, 0x8D, 0x48, 0x08, 0x56, 0x89, 0x4C, 0x24, 0x18, 0x8B, 0x08, 0x57, 0x8D, 0x14, 0xE9, 0x3B, 0xD1, 0x89, 0x10, 0x73, 0x03, 0xFF, 0x40, 0x04, 0x8B, 0x78, 0x04, 0x8B, 0xD5, 0xC1, 0xEA, 0x1D, 0xC1, 0xE9, 0x03, 0x03, 0xFA, 0x83, 0xE1, 0x3F, 0x89, 0x78, 0x04, 0x74, 0x63, 0xBB, 0x40, 0x00, 0x00, 0x00, 0x8D, 0x7C, 0x01, 0x18, 0x2B, 0xD9, 0x3B, 0xEB, 0x73, 0x19, 0x8B, 0x74, 0x24, 0x18, 0x8B, 0xCD, 0x8B, 0xC1, 0xC1, 0xE9, 0x02, 0xF3, 0xA5, 0x8B, 0xC8, 0x83, 0xE1, 0x03, 0xF3, 0xA4, 0x5F, 0x5E, 0x5D, 0x5B, 0xC3, 0x8B, 0x74, 0x24, 0x18, 0x8B, 0xCB, 0x8B, 0xD1, 0x83, 0xC0, 0x18, 0xC1, 0xE9, 0x02, 0xF3, 0xA5, 0x8B, 0xCA, 0x8B, 0x54, 0x24, 0x1C, 0x83, 0xE1, 0x03, 0xF3, 0xA4, 0x8B, 0xCB, 0xC1, 0xE9, 0x02, 0x51, 0x50, 0x52, 0xE8, 0x7A, 0xF6, 0xFF, 0xFF, 0x8B, 0x4C, 0x24, 0x24, 0x8B, 0x44, 0x24, 0x20, 0x03, 0xCB, 0x83, 0xC4, 0x0C, 0x89, 0x4C, 0x24, 0x18, 0x2B, 0xEB, 0x83, 0xFD, 0x40, 0x72, 0x45, 0x8B, 0xCD, 0x8D, 0x58, 0x18, 0xC1, 0xE9, 0x06, 0x89, 0x4C, 0x24, 0x1C, 0x8B, 0x74, 0x24, 0x18, 0xB9, 0x10, 0x00, 0x00, 0x00, 0x8B, 0xFB, 0x6A, 0x10, 0x83, 0xC0, 0x08, 0x53, 0xF3, 0xA5, 0x50, 0xE8, 0x3D, 0xF6, 0xFF, 0xFF, 0x8B, 0x54, 0x24, 0x24, 0x8B, 0x44, 0x24, 0x28, 0x83, 0xC4, 0x0C, 0x83, 0xC2, 0x40, 0x83, 0xED, 0x40, 0x48, 0x89, 0x44, 0x24, 0x1C, 0x8B, 0x44, 0x24, 0x14, 0x89, 0x54, 0x24, 0x18, 0x75, 0xC7, 0x8B, 0x74, 0x24, 0x18, 0x8B, 0xCD, 0x8D, 0x78, 0x18, 0x8B, 0xC1, 0xC1, 0xE9, 0x02, 0xF3, 0xA5, 0x8B, 0xC8, 0x83, 0xE1, 0x03, 0xF3, 0xA4, 0x5F, 0x5E, 0x5D, 0x5B, 0xC3
			};

			static unsigned char finalize_raw[] =
			{
				0x83, 0xEC, 0x40, 0x55, 0x56, 0x8B, 0x74, 0x24, 0x4C, 0x57, 0x8B, 0x06, 0x8B, 0x4E, 0x04, 0x89, 0x44, 0x24, 0x44, 0x89, 0x4C, 0x24, 0x48, 0xC1, 0xE8, 0x03, 0x83, 0xE0, 0x3F, 0x8D, 0x6E, 0x08, 0x83, 0xF8, 0x38, 0xB9, 0x38, 0x00, 0x00, 0x00, 0x72, 0x05, 0xB9, 0x78, 0x00, 0x00, 0x00, 0x2B, 0xC8, 0x51, 0x68, 0x10, 0x5F, 0x31, 0x0F, 0x56, 0xE8, 0xC3, 0xFE, 0xFF, 0xFF, 0x8D, 0x46, 0x1A, 0x83, 0xC4, 0x0C, 0x8D, 0x74, 0x24, 0x0C, 0xBF, 0x0E, 0x00, 0x00, 0x00, 0x33, 0xD2, 0x33, 0xC9, 0x8A, 0x70, 0x01, 0x8A, 0x48, 0xFF, 0x8A, 0x10, 0x83, 0xC6, 0x04, 0xC1, 0xE2, 0x08, 0x0B, 0xD1, 0x33, 0xC9, 0x8A, 0x48, 0xFE, 0x83, 0xC0, 0x04, 0xC1, 0xE2, 0x08, 0x0B, 0xD1, 0x4F, 0x89, 0x56, 0xFC, 0x75, 0xD9, 0x8D, 0x54, 0x24, 0x0C, 0x6A, 0x00, 0x52, 0x55, 0xE8, 0x80, 0xF5, 0xFF, 0xFF, 0x8B, 0x44, 0x24, 0x60, 0x83, 0xC4, 0x0C, 0xBE, 0x04, 0x00, 0x00, 0x00, 0x8D, 0x48, 0x01, 0x8B, 0xC5, 0x8A, 0x10, 0x83, 0xC0, 0x04, 0x88, 0x51, 0xFF, 0x8B, 0x50, 0xFC, 0xC1, 0xEA, 0x08, 0x88, 0x11, 0x8B, 0x50, 0xFC, 0xC1, 0xEA, 0x10, 0x88, 0x51, 0x01, 0x8B, 0x50, 0xFC, 0xC1, 0xEA, 0x18, 0x88, 0x51, 0x02, 0x83, 0xC1, 0x04, 0x4E, 0x75, 0xD8, 0x5F, 0x5E, 0x5D, 0x83, 0xC4, 0x40, 0xC3
			};

			static unsigned char transform_raw[] =
			{
				0x8B, 0x44, 0x24, 0x04, 0x83, 0xEC, 0x38, 0x8B, 0x10, 0x53, 0x8B, 0x58, 0x08, 0x55, 0x8B, 0x6C, 0x24, 0x4C, 0x56, 0x8B, 0x70, 0x0C, 0x57, 0x8B, 0x78, 0x04, 0x8B, 0x44, 0x24, 0x50, 0x85, 0xED, 0x7E, 0x56, 0x8B, 0xC8, 0x89, 0x6C, 0x24, 0x34, 0x89, 0x4C, 0x24, 0x50, 0x8B, 0x09, 0x8B, 0xE9, 0x89, 0x4C, 0x24, 0x54, 0x81, 0xE5, 0x00, 0xFF, 0x00, 0x00, 0xC1, 0xE1, 0x10, 0x0B, 0xE9, 0x8B, 0x4C, 0x24, 0x54, 0xC1, 0xF9, 0x18, 0xC1, 0xE5, 0x08, 0x81, 0xE1, 0xFF, 0x00, 0xFF, 0x00, 0x0B, 0xE9, 0x8B, 0x4C, 0x24, 0x54, 0xC1, 0xF9, 0x08, 0x81, 0xE1, 0x00, 0xFF, 0x00, 0xFF, 0x0B, 0xE9, 0x8B, 0x4C, 0x24, 0x50, 0x89, 0x29, 0x8B, 0x6C, 0x24, 0x34, 0x83, 0xC1, 0x04, 0x4D, 0x89, 0x4C, 0x24, 0x50, 0x89, 0x6C, 0x24, 0x34, 0x75, 0xB4, 0x8B, 0x08, 0x8B, 0xEE, 0x33, 0xEB, 0x89, 0x4C, 0x24, 0x54, 0x23, 0xEF, 0x33, 0xEE, 0x03, 0xE9, 0x8D, 0x94, 0x2A, 0x78, 0xA4, 0x6A, 0xD7, 0x8B, 0xEB, 0x8B, 0xCA, 0x33, 0xEF, 0xC1, 0xE9, 0x19, 0xC1, 0xE2, 0x07, 0x0B, 0xCA, 0x8B, 0x50, 0x04, 0x03, 0xCF, 0x89, 0x54, 0x24, 0x1C, 0x23, 0xE9, 0x33, 0xEB, 0x03, 0xEA, 0x8D, 0xB4, 0x2E, 0x56, 0xB7, 0xC7, 0xE8, 0x8B, 0xEF, 0x8B, 0xD6, 0x33, 0xE9, 0xC1, 0xEA, 0x14, 0xC1, 0xE6, 0x0C, 0x0B, 0xD6, 0x8B, 0x70, 0x08, 0x03, 0xD1, 0x89, 0x74, 0x24, 0x3C, 0x23, 0xEA, 0x33, 0xEF, 0x03, 0xEE, 0x8D, 0x9C, 0x2B, 0xDB, 0x70, 0x20, 0x24, 0x8B, 0xEA, 0x8B, 0xF3, 0x33, 0xE9, 0xC1, 0xEE, 0x0F, 0xC1, 0xE3, 0x11, 0x0B, 0xF3, 0x8B, 0x58, 0x0C, 0x03, 0xF2, 0x89, 0x5C, 0x24, 0x14, 0x23, 0xEE, 0x33, 0xE9, 0x03, 0xEB, 0x8D, 0x9C, 0x2F, 0xEE, 0xCE, 0xBD, 0xC1, 0x8B, 0xEA, 0x8B, 0xFB, 0x33, 0xEE, 0xC1, 0xE7, 0x16, 0xC1, 0xEB, 0x0A, 0x0B, 0xFB, 0x8B, 0x58, 0x10, 0x03, 0xFE, 0x89, 0x5C, 0x24, 0x2C, 0x23, 0xEF, 0x33, 0xEA, 0x03, 0xEB, 0x8D, 0x8C, 0x29, 0xAF, 0x0F, 0x7C, 0xF5, 0x8B, 0xEE, 0x8B, 0xD9, 0x33, 0xEF, 0xC1, 0xEB, 0x19, 0xC1, 0xE1, 0x07, 0x0B, 0xD9, 0x8B, 0x48, 0x14, 0x03, 0xDF, 0x89, 0x4C, 0x24, 0x10, 0x23, 0xEB, 0x33, 0xEE, 0x03, 0xE9, 0x8D, 0x94, 0x2A, 0x2A, 0xC6, 0x87, 0x47, 0x8B, 0xEF, 0x8B, 0xCA, 0xC1, 0xE9, 0x14, 0xC1, 0xE2, 0x0C, 0x0B, 0xCA, 0x8B, 0x50, 0x18, 0x03, 0xCB, 0x89, 0x54, 0x24, 0x24, 0x33, 0xEB, 0x23, 0xE9, 0x33, 0xEF, 0x03, 0xEA, 0x8D, 0xB4, 0x2E, 0x13, 0x46, 0x30, 0xA8, 0x8B, 0xE9, 0x8B, 0xD6, 0x33, 0xEB, 0xC1, 0xEA, 0x0F, 0xC1, 0xE6, 0x11, 0x0B, 0xD6, 0x8B, 0x70, 0x1C, 0x03, 0xD1, 0x89, 0x74, 0x24, 0x50, 0x23, 0xEA, 0x33, 0xEB, 0x03, 0xEE, 0x8D, 0xBC, 0x2F, 0x01, 0x95, 0x46, 0xFD, 0x8B, 0xE9, 0x8B, 0xF7, 0x33, 0xEA, 0xC1, 0xE6, 0x16, 0xC1, 0xEF, 0x0A, 0x0B, 0xF7, 0x8B, 0x78, 0x20, 0x03, 0xF2, 0x89, 0x7C, 0x24, 0x20, 0x23, 0xEE, 0x33, 0xE9, 0x03, 0xEF, 0x8D, 0x9C, 0x2B, 0xD8, 0x98, 0x80, 0x69, 0x8B, 0xEA, 0x8B, 0xFB, 0x33, 0xEE, 0xC1, 0xEF, 0x19, 0xC1, 0xE3, 0x07, 0x0B, 0xFB, 0x8B, 0x58, 0x24, 0x03, 0xFE, 0x89, 0x5C, 0x24, 0x34, 0x23, 0xEF, 0x33, 0xEA, 0x03, 0xEB, 0x8D, 0x8C, 0x29, 0xAF, 0xF7, 0x44, 0x8B, 0x8B, 0xEE, 0x8B, 0xD9, 0x33, 0xEF, 0xC1, 0xEB, 0x14, 0xC1, 0xE1, 0x0C, 0x0B, 0xD9, 0x8B, 0x48, 0x28, 0x03, 0xDF, 0x89, 0x4C, 0x24, 0x18, 0x23, 0xEB, 0x33, 0xEE, 0x03, 0xE9, 0x8D, 0x94, 0x2A, 0xB1, 0x5B, 0xFF, 0xFF, 0x8B, 0xEB, 0x8B, 0xCA, 0x33, 0xEF, 0xC1, 0xE9, 0x0F, 0xC1, 0xE2, 0x11, 0x0B, 0xCA, 0x8B, 0x50, 0x2C, 0x03, 0xCB, 0x89, 0x54, 0x24, 0x30, 0x23, 0xE9, 0x33, 0xEF, 0x03, 0xEA, 0x8D, 0xB4, 0x2E, 0xBE, 0xD7, 0x5C, 0x89, 0x8B, 0xEB, 0x8B, 0xD6, 0x33, 0xE9, 0xC1, 0xE2, 0x16, 0xC1, 0xEE, 0x0A, 0x0B, 0xD6, 0x8B, 0x70, 0x30, 0x03, 0xD1, 0x89, 0x74, 0x24, 0x38, 0x23, 0xEA, 0x33, 0xEB, 0x03, 0xEE, 0x8D, 0xBC, 0x2F, 0x22, 0x11, 0x90, 0x6B, 0x8B, 0xE9, 0x8B, 0xF7, 0x33, 0xEA, 0xC1, 0xEE, 0x19, 0xC1, 0xE7, 0x07, 0x0B, 0xF7, 0x8B, 0x78, 0x34, 0x03, 0xF2, 0x89, 0x7C, 0x24, 0x28, 0x23, 0xEE, 0x33, 0xE9, 0x03, 0xEF, 0x8D, 0xBC, 0x2B, 0x93, 0x71, 0x98, 0xFD, 0x8B, 0x68, 0x38, 0x8B, 0xDF, 0x8B, 0x40, 0x3C, 0xC1, 0xEB, 0x14, 0xC1, 0xE7, 0x0C, 0x0B, 0xDF, 0x8B, 0xFA, 0x03, 0xDE, 0x33, 0xFE, 0x23, 0xFB, 0x89, 0x6C, 0x24, 0x40, 0x33, 0xFA, 0x89, 0x44, 0x24, 0x44, 0x03, 0xFD, 0x8D, 0x8C, 0x39, 0x8E, 0x43, 0x79, 0xA6, 0x8B, 0xF9, 0xC1, 0xEF, 0x0F, 0xC1, 0xE1, 0x11, 0x0B, 0xF9, 0x8B, 0xCB, 0x03, 0xFB, 0x33, 0xCE, 0x23, 0xCF, 0x33, 0xCE, 0x03, 0xC8, 0x8D, 0x94, 0x0A, 0x21, 0x08, 0xB4, 0x49, 0x8B, 0xCA, 0xC1, 0xE1, 0x16, 0xC1, 0xEA, 0x0A, 0x0B, 0xCA, 0x8B, 0xD7, 0x03, 0xCF, 0x33, 0xD1, 0x23, 0xD3, 0x33, 0xD7, 0x03, 0x54, 0x24, 0x1C, 0x8D, 0xB4, 0x16, 0x62, 0x25, 0x1E, 0xF6, 0x8B, 0xD6, 0xC1, 0xEA, 0x1B, 0xC1, 0xE6, 0x05, 0x0B, 0xD6, 0x8B, 0xF1, 0x03, 0xD1, 0x33, 0xF2, 0x23, 0xF7, 0x33, 0xF1, 0x03, 0x74, 0x24, 0x24, 0x8D, 0x9C, 0x33, 0x40, 0xB3, 0x40, 0xC0, 0x8B, 0xF3, 0xC1, 0xEE, 0x17, 0xC1, 0xE3, 0x09, 0x0B, 0xF3, 0x03, 0xF2, 0x8B, 0xDE, 0x33, 0xDA, 0x23, 0xD9, 0x33, 0xDA, 0x03, 0x5C, 0x24, 0x30, 0x8D, 0x9C, 0x1F, 0x51, 0x5A, 0x5E, 0x26, 0x8B, 0xFB, 0xC1, 0xEF, 0x12, 0xC1, 0xE3, 0x0E, 0x0B, 0xFB, 0x8B, 0xDE, 0x03, 0xFE, 0x33, 0xDF, 0x23, 0xDA, 0x33, 0xDE, 0x03, 0x5C, 0x24, 0x54, 0x8D, 0x9C, 0x19, 0xAA, 0xC7, 0xB6, 0xE9, 0x8B, 0xCB, 0xC1, 0xE1, 0x14, 0xC1, 0xEB, 0x0C, 0x0B, 0xCB, 0x8B, 0xDF, 0x03, 0xCF, 0x33, 0xD9, 0x23, 0xDE, 0x33, 0xDF, 0x03, 0x5C, 0x24, 0x10, 0x8D, 0x9C, 0x1A, 0x5D, 0x10, 0x2F, 0xD6, 0x8B, 0xD3, 0xC1, 0xEA, 0x1B, 0xC1, 0xE3, 0x05, 0x0B, 0xD3, 0x8B, 0xD9, 0x03, 0xD1, 0x33, 0xDA, 0x23, 0xDF, 0x33, 0xD9, 0x03, 0x5C, 0x24, 0x18, 0x8D, 0x9C, 0x1E, 0x53, 0x14, 0x44, 0x02, 0x8B, 0xF3, 0xC1, 0xEE, 0x17, 0xC1, 0xE3, 0x09, 0x0B, 0xF3, 0x03, 0xF2, 0x8B, 0xDE, 0x33, 0xDA, 0x23, 0xD9, 0x33, 0xDA, 0x03, 0xD8, 0x8D, 0x84, 0x1F, 0x81, 0xE6, 0xA1, 0xD8, 0x8B, 0x5C, 0x24, 0x2C, 0x8B, 0xF8, 0xC1, 0xEF, 0x12, 0xC1, 0xE0, 0x0E, 0x0B, 0xF8, 0x8B, 0xC6, 0x03, 0xFE, 0x33, 0xC7, 0x23, 0xC2, 0x33, 0xC6, 0x03, 0xC3, 0x8B, 0x5C, 0x24, 0x34, 0x8D, 0x84, 0x01, 0xC8, 0xFB, 0xD3, 0xE7, 0x8B, 0xC8, 0xC1, 0xE1, 0x14, 0xC1, 0xE8, 0x0C, 0x0B, 0xC8, 0x8B, 0xC7, 0x03, 0xCF, 0x33, 0xC1, 0x23, 0xC6, 0x33, 0xC7, 0x03, 0xC3, 0x8D, 0x84, 0x02, 0xE6, 0xCD, 0xE1, 0x21, 0x8B, 0xD0, 0xC1, 0xEA, 0x1B, 0xC1, 0xE0, 0x05, 0x0B, 0xD0, 0x8B, 0xC1, 0x03, 0xD1, 0x33, 0xC2, 0x23, 0xC7, 0x33, 0xC1, 0x03, 0xC5, 0x8D, 0x84, 0x06, 0xD6, 0x07, 0x37, 0xC3, 0x8B, 0xF0, 0xC1, 0xEE, 0x17, 0xC1, 0xE0, 0x09, 0x0B, 0xF0, 0x03, 0xF2, 0x8B, 0xC6, 0x33, 0xC2, 0x23, 0xC1, 0x33, 0xC2, 0x8B, 0x6C, 0x24, 0x14, 0x8B, 0x5C, 0x24, 0x3C, 0x03, 0xC5, 0x8B, 0x6C, 0x24, 0x20, 0x8D, 0x84, 0x07, 0x87, 0x0D, 0xD5, 0xF4, 0x8B, 0xF8, 0xC1, 0xE0, 0x0E, 0xC1, 0xEF, 0x12, 0x0B, 0xF8, 0x8B, 0xC6, 0x03, 0xFE, 0x33, 0xC7, 0x23, 0xC2, 0x33, 0xC6, 0x03, 0xC5, 0x8B, 0x6C, 0x24, 0x28, 0x8D, 0x84, 0x01, 0xED, 0x14, 0x5A, 0x45, 0x8B, 0xC8, 0xC1, 0xE1, 0x14, 0xC1, 0xE8, 0x0C, 0x0B, 0xC8, 0x8B, 0xC7, 0x03, 0xCF, 0x33, 0xC1, 0x23, 0xC6, 0x33, 0xC7, 0x03, 0xC5, 0x8B, 0x6C, 0x24, 0x50, 0x8D, 0x84, 0x02, 0x05, 0xE9, 0xE3, 0xA9, 0x8B, 0xD0, 0xC1, 0xEA, 0x1B, 0xC1, 0xE0, 0x05, 0x0B, 0xD0, 0x8B, 0xC1, 0x03, 0xD1, 0x33, 0xC2, 0x23, 0xC7, 0x33, 0xC1, 0x03, 0xC3, 0x8D, 0xB4, 0x06, 0xF8, 0xA3, 0xEF, 0xFC, 0x8B, 0xDE, 0xC1, 0xEB, 0x17, 0xC1, 0xE6, 0x09, 0x0B, 0xDE, 0x03, 0xDA, 0x8B, 0xC3, 0x33, 0xC2, 0x23, 0xC1, 0x33, 0xC2, 0x03, 0xC5, 0x8B, 0x6C, 0x24, 0x38, 0x8D, 0x84, 0x07, 0xD9, 0x02, 0x6F, 0x67, 0x8B, 0xF8, 0xC1, 0xEF, 0x12, 0xC1, 0xE0, 0x0E, 0x0B, 0xF8, 0x8B, 0xC3, 0x03, 0xFB, 0x33, 0xC7, 0x8B, 0xF0, 0x23, 0xF2, 0x33, 0xF3, 0x03, 0xF5, 0x8D, 0x8C, 0x31, 0x8A, 0x4C, 0x2A, 0x8D, 0x8B, 0xF1, 0xC1, 0xE6, 0x14, 0xC1, 0xE9, 0x0C, 0x0B, 0xF1, 0x8B, 0x4C, 0x24, 0x10, 0x03, 0xF7, 0x33, 0xC6, 0x03, 0xC1, 0x8D, 0x94, 0x02, 0x42, 0x39, 0xFA, 0xFF, 0x8B, 0xCA, 0xC1, 0xE9, 0x1C, 0xC1, 0xE2, 0x04, 0x0B, 0xCA, 0x8B, 0xD7, 0x03, 0xCE, 0x33, 0xD6, 0x33, 0xD1, 0x8B, 0x6C, 0x24, 0x20, 0x03, 0xD5, 0x8B, 0x6C, 0x24, 0x30, 0x8D, 0x84, 0x13, 0x81, 0xF6, 0x71, 0x87, 0x8B, 0xD8, 0xC1, 0xEB, 0x15, 0xC1, 0xE0, 0x0B, 0x0B, 0xD8, 0x03, 0xD9, 0x8B, 0xC3, 0x33, 0xC6, 0x33, 0xC1, 0x03, 0xC5, 0x8B, 0x6C, 0x24, 0x40, 0x8D, 0x84, 0x07, 0x22, 0x61, 0x9D, 0x6D, 0x8B, 0xF8, 0xC1, 0xEF, 0x10, 0xC1, 0xE0, 0x10, 0x0B, 0xF8, 0x8B, 0xC3, 0x03, 0xFB, 0x33, 0xC7, 0x8B, 0xD0, 0x33, 0xD1, 0x03, 0xD5, 0x8B, 0x6C, 0x24, 0x1C, 0x8D, 0xB4, 0x16, 0x0C, 0x38, 0xE5, 0xFD, 0x8B, 0xD6, 0xC1, 0xE2, 0x17, 0xC1, 0xEE, 0x09, 0x0B, 0xD6, 0x8B, 0x74, 0x24, 0x2C, 0x03, 0xD7, 0x33, 0xC2, 0x03, 0xC5, 0x8B, 0x6C, 0x24, 0x50, 0x8D, 0x84, 0x01, 0x44, 0xEA, 0xBE, 0xA4, 0x8B, 0xC8, 0xC1, 0xE9, 0x1C, 0xC1, 0xE0, 0x04, 0x0B, 0xC8, 0x8B, 0xC7, 0x03, 0xCA, 0x33, 0xC2, 0x33, 0xC1, 0x03, 0xC6, 0x8D, 0x9C, 0x03, 0xA9, 0xCF, 0xDE, 0x4B, 0x8B, 0xF3, 0xC1, 0xEE, 0x15, 0xC1, 0xE3, 0x0B, 0x0B, 0xF3, 0x03, 0xF1, 0x8B, 0xC6, 0x33, 0xC2, 0x33, 0xC1, 0x03, 0xC5, 0x8B, 0x6C, 0x24, 0x18, 0x8D, 0x84, 0x07, 0x60, 0x4B, 0xBB, 0xF6, 0x8B, 0xF8, 0xC1, 0xEF, 0x10, 0xC1, 0xE0, 0x10, 0x0B, 0xF8, 0x8B, 0xC6, 0x03, 0xFE, 0x33, 0xC7, 0x8B, 0xD8, 0x33, 0xD9, 0x03, 0xDD, 0x8B, 0x6C, 0x24, 0x28, 0x8D, 0x9C, 0x1A, 0x70, 0xBC, 0xBF, 0xBE, 0x8B, 0xD3, 0xC1, 0xE2, 0x17, 0xC1, 0xEB, 0x09, 0x0B, 0xD3, 0x03, 0xD7, 0x33, 0xC2, 0x03, 0xC5, 0x8D, 0x84, 0x01, 0xC6, 0x7E, 0x9B, 0x28, 0x8B, 0xC8, 0xC1, 0xE9, 0x1C, 0xC1, 0xE0, 0x04, 0x8B, 0x6C, 0x24, 0x54, 0x0B, 0xC8, 0x8B, 0xC7, 0x03, 0xCA, 0x33, 0xC2, 0x33, 0xC1, 0x03, 0xC5, 0x8B, 0x6C, 0x24, 0x14, 0x8D, 0x84, 0x06, 0xFA, 0x27, 0xA1, 0xEA, 0x8B, 0xF0, 0xC1, 0xE0, 0x0B, 0xC1, 0xEE, 0x15, 0x0B, 0xF0, 0x03, 0xF1, 0x8B, 0xC6, 0x33, 0xC2, 0x33, 0xC1, 0x03, 0xC5, 0x8B, 0x6C, 0x24, 0x24, 0x8D, 0x84, 0x07, 0x85, 0x30, 0xEF, 0xD4, 0x8B, 0xF8, 0xC1, 0xEF, 0x10, 0xC1, 0xE0, 0x10, 0x0B, 0xF8, 0x8B, 0xC6, 0x03, 0xFE, 0x33, 0xC7, 0x8B, 0xD8, 0x33, 0xD9, 0x03, 0xDD, 0x8B, 0x6C, 0x24, 0x34, 0x8D, 0x9C, 0x1A, 0x05, 0x1D, 0x88, 0x04, 0x8B, 0xD3, 0xC1, 0xE2, 0x17, 0xC1, 0xEB, 0x09, 0x0B, 0xD3, 0x8B, 0x5C, 0x24, 0x44, 0x03, 0xD7, 0x33, 0xC2, 0x03, 0xC5, 0x8B, 0x6C, 0x24, 0x38, 0x8D, 0x84, 0x01, 0x39, 0xD0, 0xD4, 0xD9, 0x8B, 0xC8, 0xC1, 0xE9, 0x1C, 0xC1, 0xE0, 0x04, 0x0B, 0xC8, 0x8B, 0xC7, 0x03, 0xCA, 0x33, 0xC2, 0x33, 0xC1, 0x03, 0xC5, 0x8D, 0x84, 0x06, 0xE5, 0x99, 0xDB, 0xE6, 0x8B, 0xF0, 0xC1, 0xEE, 0x15, 0xC1, 0xE0, 0x0B, 0x0B, 0xF0, 0x03, 0xF1, 0x8B, 0xC6, 0x33, 0xC2, 0x33, 0xC1, 0x03, 0xC3, 0x8B, 0x5C, 0x24, 0x3C, 0x8D, 0x84, 0x07, 0xF8, 0x7C, 0xA2, 0x1F, 0x8B, 0xF8, 0xC1, 0xEF, 0x10, 0xC1, 0xE0, 0x10, 0x0B, 0xF8, 0x8B, 0xC6, 0x03, 0xFE, 0x33, 0xC7, 0x33, 0xC1, 0x03, 0xC3, 0x8D, 0x84, 0x02, 0x65, 0x56, 0xAC, 0xC4, 0x8B, 0xD0, 0xC1, 0xE2, 0x17, 0xC1, 0xE8, 0x09, 0x0B, 0xD0, 0x8B, 0xC6, 0x03, 0xD7, 0xF7, 0xD0, 0x0B, 0xC2, 0x33, 0xC7, 0x03, 0x44, 0x24, 0x54, 0x8D, 0x84, 0x01, 0x44, 0x22, 0x29, 0xF4, 0x8B, 0xC8, 0xC1, 0xE0, 0x06, 0xC1, 0xE9, 0x1A, 0x0B, 0xC8, 0x8B, 0xC7, 0xF7, 0xD0, 0x03, 0xCA, 0x0B, 0xC1, 0x33, 0xC2, 0x03, 0x44, 0x24, 0x50, 0x8D, 0x84, 0x06, 0x97, 0xFF, 0x2A, 0x43, 0x8B, 0xF0, 0xC1, 0xE0, 0x0A, 0xC1, 0xEE, 0x16, 0x0B, 0xF0, 0x8B, 0xC2, 0xF7, 0xD0, 0x03, 0xF1, 0x0B, 0xC6, 0x33, 0xC1, 0x03, 0x44, 0x24, 0x40, 0x8D, 0x84, 0x07, 0xA7, 0x23, 0x94, 0xAB, 0x8B, 0xF8, 0xC1, 0xE0, 0x0F, 0xC1, 0xEF, 0x11, 0x0B, 0xF8, 0x8B, 0xC1, 0x03, 0xFE, 0xF7, 0xD0, 0x0B, 0xC7, 0x33, 0xC6, 0x03, 0x44, 0x24, 0x10, 0x8D, 0x84, 0x02, 0x39, 0xA0, 0x93, 0xFC, 0x8B, 0xD0, 0xC1, 0xE2, 0x15, 0xC1, 0xE8, 0x0B, 0x0B, 0xD0, 0x8B, 0xC6, 0x03, 0xD7, 0xF7, 0xD0, 0x0B, 0xC2, 0x33, 0xC7, 0x03, 0xC5, 0x8B, 0x6C, 0x24, 0x14, 0x8D, 0x84, 0x01, 0xC3, 0x59, 0x5B, 0x65, 0x8B, 0xC8, 0xC1, 0xE9, 0x1A, 0xC1, 0xE0, 0x06, 0x0B, 0xC8, 0x8B, 0xC7, 0x03, 0xCA, 0xF7, 0xD0, 0x0B, 0xC1, 0x33, 0xC2, 0x03, 0xC5, 0x8B, 0x6C, 0x24, 0x18, 0x8D, 0x84, 0x06, 0x92, 0xCC, 0x0C, 0x8F, 0x8B, 0xF0, 0xC1, 0xEE, 0x16, 0xC1, 0xE0, 0x0A, 0x0B, 0xF0, 0x8B, 0xC2, 0x03, 0xF1, 0xF7, 0xD0, 0x0B, 0xC6, 0x33, 0xC1, 0x03, 0xC5, 0x8B, 0x6C, 0x24, 0x1C, 0x8D, 0x84, 0x07, 0x7D, 0xF4, 0xEF, 0xFF, 0x8B, 0xF8, 0xC1, 0xEF, 0x11, 0xC1, 0xE0, 0x0F, 0x0B, 0xF8, 0x8B, 0xC1, 0x03, 0xFE, 0xF7, 0xD0, 0x0B, 0xC7, 0x33, 0xC6, 0x03, 0xC5, 0x8B, 0x6C, 0x24, 0x20, 0x8D, 0x84, 0x02, 0xD1, 0x5D, 0x84, 0x85, 0x8B, 0xD0, 0xC1, 0xE2, 0x15, 0xC1, 0xE8, 0x0B, 0x0B, 0xD0, 0x8B, 0xC6, 0x03, 0xD7, 0xF7, 0xD0, 0x0B, 0xC2, 0x33, 0xC7, 0x03, 0xC5, 0x8B, 0x6C, 0x24, 0x44, 0x8D, 0x84, 0x01, 0x4F, 0x7E, 0xA8, 0x6F, 0x8B, 0xC8, 0xC1, 0xE9, 0x1A, 0xC1, 0xE0, 0x06, 0x0B, 0xC8, 0x8B, 0xC7, 0x03, 0xCA, 0xF7, 0xD0, 0x0B, 0xC1, 0x33, 0xC2, 0x03, 0xC5, 0x8B, 0x6C, 0x24, 0x24, 0x8D, 0xB4, 0x06, 0xE0, 0xE6, 0x2C, 0xFE, 0x8B, 0xC6, 0xC1, 0xE8, 0x16, 0xC1, 0xE6, 0x0A, 0x0B, 0xC6, 0x8B, 0xF2, 0x03, 0xC1, 0xF7, 0xD6, 0x0B, 0xF0, 0x33, 0xF1, 0x03, 0xF5, 0x8B, 0x6C, 0x24, 0x28, 0x8D, 0xBC, 0x37, 0x14, 0x43, 0x01, 0xA3, 0x8B, 0xF7, 0xC1, 0xEE, 0x11, 0xC1, 0xE7, 0x0F, 0x0B, 0xF7, 0x8B, 0xF9, 0x03, 0xF0, 0xF7, 0xD7, 0x0B, 0xFE, 0x33, 0xF8, 0x03, 0xFD, 0x8B, 0x6C, 0x24, 0x2C, 0x8D, 0xBC, 0x3A, 0xA1, 0x11, 0x08, 0x4E, 0x8B, 0xD7, 0xC1, 0xE2, 0x15, 0xC1, 0xEF, 0x0B, 0x0B, 0xD7, 0x8B, 0xF8, 0x03, 0xD6, 0xF7, 0xD7, 0x0B, 0xFA, 0x33, 0xFE, 0x03, 0xFD, 0x8B, 0x6C, 0x24, 0x30, 0x8D, 0xBC, 0x39, 0x82, 0x7E, 0x53, 0xF7, 0x8B, 0xCF, 0xC1, 0xE9, 0x1A, 0xC1, 0xE7, 0x06, 0x0B, 0xCF, 0x8B, 0xFE, 0x03, 0xCA, 0xF7, 0xD7, 0x0B, 0xF9, 0x33, 0xFA, 0x03, 0xFD, 0x8D, 0xBC, 0x38, 0x35, 0xF2, 0x3A, 0xBD, 0x8B, 0xC7, 0xC1, 0xE8, 0x16, 0xC1, 0xE7, 0x0A, 0x0B, 0xC7, 0x8B, 0xFA, 0x03, 0xC1, 0xF7, 0xD7, 0x0B, 0xF8, 0x33, 0xF9, 0x03, 0xFB, 0x8B, 0x5C, 0x24, 0x34, 0x8D, 0xBC, 0x3E, 0xBB, 0xD2, 0xD7, 0x2A, 0x8B, 0xF7, 0xC1, 0xEE, 0x11, 0xC1, 0xE7, 0x0F, 0x0B, 0xF7, 0x8B, 0xF9, 0x03, 0xF0, 0xF7, 0xD7, 0x0B, 0xFE, 0x33, 0xF8, 0x03, 0xFB, 0x8D, 0xBC, 0x3A, 0x91, 0xD3, 0x86, 0xEB, 0x8B, 0x54, 0x24, 0x4C, 0x8B, 0x2A, 0x8B, 0x5A, 0x04, 0x03, 0xE9, 0x8B, 0xCF, 0xC1, 0xE1, 0x15, 0xC1, 0xEF, 0x0B, 0x0B, 0xCF, 0x8B, 0x7A, 0x08, 0x03, 0xCE, 0x03, 0xFE, 0x03, 0xD9, 0x8B, 0x4A, 0x0C, 0x89, 0x7A, 0x08, 0x5F, 0x89, 0x2A, 0x03, 0xC8, 0x5E, 0x89, 0x5A, 0x04, 0x5D, 0x89, 0x4A, 0x0C, 0x5B, 0x83, 0xC4, 0x38, 0xC3
			};

			static unsigned char encode_data[] =
			{
				0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6E, 0x67, 0x46, 0x6F, 0x6C, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x00, 0x00, 0x00, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6E, 0x67, 0x4F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x00, 0x00, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6E, 0x67, 0x4F, 0x6E, 0x4F, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x53, 0x4F, 0x46, 0x54
			};

			/* function-pointer functions based on the raw data above  */
			void initialize_context(md5_context& context)
			{
				typedef void(__cdecl* hsmd5_initcontext_t)(md5_context& context);
				reinterpret_cast<hsmd5_initcontext_t>(&initialize_context_raw)(context);
			}

			void update(md5_context& context, void* data, int length)
			{
				typedef void(__cdecl* hsmd5_update_t)(md5_context& context, void* data, int length);
				reinterpret_cast<hsmd5_update_t>(&update_raw)(context, data, length);
			}

			void finalize(md5_context& context, unsigned char* digest)
			{
				typedef void(__cdecl* hsmd5_finalize_t)(md5_context& context, unsigned char* digest);
				reinterpret_cast<hsmd5_finalize_t>(&finalize_raw)(context, digest);
			}

			void relink()
			{
				/* relink initialize_context */
				ahn::crypto::relink::make_executable(initialize_context_raw, _countof(initialize_context_raw));

				/* relink update */
				ahn::crypto::relink::make_executable(update_raw, _countof(update_raw));

				ahn::crypto::relink::find_and_replace_call(update_raw, _countof(update_raw), 0xFFFFF67A, reinterpret_cast<unsigned int>(transform_raw));
				ahn::crypto::relink::find_and_replace_call(update_raw, _countof(update_raw), 0xFFFFF63D, reinterpret_cast<unsigned int>(transform_raw));

				/* relink finalize */
				ahn::crypto::relink::make_executable(finalize_raw, _countof(finalize_raw));

				ahn::crypto::relink::find_and_replace_offset(finalize_raw, _countof(finalize_raw), 0x0F315F10, reinterpret_cast<unsigned int>(&encode_data));
				ahn::crypto::relink::find_and_replace_call(finalize_raw, _countof(finalize_raw), 0xFFFFFEC3, reinterpret_cast<unsigned int>(update_raw));
				ahn::crypto::relink::find_and_replace_call(finalize_raw, _countof(finalize_raw), 0xFFFFF580, reinterpret_cast<unsigned int>(transform_raw));

				/* relink transform */
				ahn::crypto::relink::make_executable(transform_raw, _countof(transform_raw));
			}
		}
	}
}